# Integrating Keycloak with Express, MongoDB, and Role-Based Access Control

To integrate Keycloak with your Express application, MongoDB, and implement role-based access control (for buyer, seller, admin, and super admin), here's a comprehensive approach:

## 1. Setup Keycloak

First, configure your Keycloak server:

1. Create a new Realm (or use `master`)
2. Create a Client (e.g., `express-app`) with:
   - Client Protocol: `openid-connect`
   - Access Type: `confidential` (for server-side apps)
   - Valid Redirect URIs: Your Express app's URLs
3. Create Roles: `buyer`, `seller`, `admin`, `super-admin`
4. Create Users and assign roles

## 2. Install Required Packages

```bash
npm install express keycloak-connect express-session mongoose cors
```

## 3. Basic Express + Keycloak Integration

```javascript
const express = require('express');
const session = require('express-session');
const Keycloak = require('keycloak-connect');
const mongoose = require('mongoose');

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/yourdb', { useNewUrlParser: true, useUnifiedTopology: true });

const app = express();

// Session configuration
const memoryStore = new session.MemoryStore();
app.use(session({
  secret: 'your-secret-key',
  resave: false,
  saveUninitialized: true,
  store: memoryStore
}));

// Keycloak configuration
const keycloak = new Keycloak({ store: memoryStore }, {
  realm: 'your-realm',
  "auth-server-url": "http://localhost:8080/auth",
  "ssl-required": "external",
  resource: "express-app",
  "confidential-port": 0,
  "public-client": true
});

app.use(keycloak.middleware());

// Protected route example
app.get('/protected', keycloak.protect(), (req, res) => {
  res.json({ message: 'This is protected data' });
});

app.listen(3000, () => console.log('Server running on port 3000'));
```

## 4. Role-Based Access Control

Create middleware for different roles:

```javascript
// Middleware for role checking
function checkRole(role) {
  return [
    keycloak.protect(),
    (req, res, next) => {
      if (req.kauth.grant.access_token.hasRole(role)) {
        next();
      } else {
        res.status(403).json({ error: 'Access denied' });
      }
    }
  ];
}

// Role-specific routes
app.get('/buyer-only', checkRole('buyer'), (req, res) => {
  res.json({ message: 'Buyer access granted' });
});

app.get('/seller-only', checkRole('seller'), (req, res) => {
  res.json({ message: 'Seller access granted' });
});

app.get('/admin-only', checkRole('admin'), (req, res) => {
  res.json({ message: 'Admin access granted' });
});

app.get('/super-admin-only', checkRole('super-admin'), (req, res) => {
  res.json({ message: 'Super Admin access granted' });
});
```

## 5. Connecting User Roles to MongoDB

Create a user model that references Keycloak IDs:

```javascript
// models/User.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  keycloakId: { type: String, required: true, unique: true },
  username: String,
  email: String,
  // Add other user-specific fields
  profileCompleted: { type: Boolean, default: false }
});

module.exports = mongoose.model('User', userSchema);
```

## 6. User Registration/Login Flow

```javascript
// After successful Keycloak authentication
app.get('/login-success', keycloak.protect(), async (req, res) => {
  try {
    const keycloakId = req.kauth.grant.access_token.content.sub;
    const email = req.kauth.grant.access_token.content.email;
    
    // Check if user exists in MongoDB
    let user = await User.findOne({ keycloakId });
    
    if (!user) {
      // Create new user in MongoDB
      user = new User({
        keycloakId,
        email,
        username: req.kauth.grant.access_token.content.preferred_username
      });
      await user.save();
    }
    
    res.json({ user });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
```

## 7. Advanced Role Handling

For more complex scenarios where you need to check multiple roles or combine Keycloak roles with database permissions:

```javascript
function checkRoles(requiredRoles) {
  return [
    keycloak.protect(),
    (req, res, next) => {
      const token = req.kauth.grant.access_token;
      const hasRole = requiredRoles.some(role => token.hasRole(role));
      
      if (hasRole) {
        next();
      } else {
        res.status(403).json({ error: 'Insufficient permissions' });
      }
    }
  ];
}

// Example usage - accessible by both admin and super-admin
app.get('/admin-area', checkRoles(['admin', 'super-admin']), (req, res) => {
  res.json({ message: 'Admin area accessed successfully' });
});
```

## 8. Frontend Integration

For your frontend, you'll need to:

1. Use the Keycloak JS adapter for direct authentication
2. Or implement OAuth2 flow with your Express backend as middleware

Example frontend code (if using Keycloak JS):

```javascript
const keycloak = Keycloak({
  url: 'http://localhost:8080/auth',
  realm: 'your-realm',
  clientId: 'express-app'
});

keycloak.init({ onLoad: 'login-required' }).then(authenticated => {
  if (authenticated) {
    console.log('User is authenticated');
    // Store the token and use it for API calls
    localStorage.setItem('keycloakToken', keycloak.token);
  }
});
```

## Best Practices

1. **Secure your configuration**: Keep Keycloak credentials in environment variables
2. **Token validation**: Always validate tokens on the server side
3. **Role management**: Consider combining Keycloak roles with database permissions for complex scenarios
4. **Session management**: Use secure, HTTP-only cookies for session management
5. **CORS**: Configure CORS properly for your frontend
6. **Logout**: Implement proper logout handling

Would you like me to elaborate on any specific part of this integration?