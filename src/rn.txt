Sure! Here's how the same concepts—**modifiers**, **inheritance**, **abstract classes**, and **interfaces**—work in **TypeScript**, with clear examples and comparison.

---

## 🔹 1. **Modifiers in TypeScript**

TypeScript has access modifiers similar to C#:

| Modifier    | Description                            |
| ----------- | -------------------------------------- |
| `public`    | Accessible from anywhere (default)     |
| `private`   | Accessible only within the class       |
| `protected` | Accessible within class and subclasses |
| `readonly`  | Value can only be assigned once        |
| `static`    | Belongs to the class, not instances    |

```ts
class Person {
  public name: string;
  private age: number;
  static count = 0;
  protected id: number;

  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
    Person.count++;
    this.id = Math.random();
  }

  public sayHello() {
    console.log(`Hello, ${this.name}`);
  }
}
```

---

## 🔹 2. **Inheritance in TypeScript**

Use `extends` for inheritance.

```ts
class Animal {
  move() {
    console.log("Animal moves");
  }
}

class Dog extends Animal {
  bark() {
    console.log("Woof!");
  }

  move() {
    console.log("Dog walks");
  }
}

const dog = new Dog();
dog.move(); // Dog walks
dog.bark(); // Woof!
```

---

## 🔹 3. **Abstract Classes in TypeScript**

Use `abstract` to define a base class that **cannot be instantiated** directly.

```ts
abstract class Vehicle {
  abstract start(): void;
  abstract stop(): void;

  protected log(message: string) {
    console.log("LOG:", message);
  }
}

class Car extends Vehicle {
  start() {
    this.log("Car started");
  }

  stop() {
    this.log("Car stopped");
  }
}
```

> You **cannot** do: `new Vehicle()` — it’s abstract.

---

## 🔹 4. **Interfaces in TypeScript**

Use `interface` to define a contract for shape of objects/classes.

```ts
interface Logger {
  log(message: string): void;
}

class ConsoleLogger implements Logger {
  log(message: string) {
    console.log("Console:", message);
  }
}
```

> Interfaces can also be used for objects:

```ts
interface User {
  id: number;
  name: string;
}

const user: User = {
  id: 1,
  name: "Alice",
};
```

---

## 🔁 Abstract vs Interface

| Feature      | `abstract class`                | `interface`                     |
| ------------ | ------------------------------- | ------------------------------- |
| Constructors | ✅ Yes                           | ❌ No                            |
| Code inside  | ✅ Can have logic                | ❌ Cannot (only shape)           |
| Multiple     | ❌ Only one `extends`            | ✅ Multiple interfaces           |
| Implements   | `extends` then override methods | `implements` + override methods |

---

### 🔂 Implementing Multiple Interfaces

```ts
interface A {
  a(): void;
}

interface B {
  b(): void;
}

class C implements A, B {
  a() {
    console.log("a");
  }

  b() {
    console.log("b");
  }
}
```

---

